# This task list is executed when cluster_state = present, which happens during
# new appliance build AND during appliance update. Steps taken are:
#
# 1. Remove an existing user allocation (with same name as this appliance)
#    This is to handle the update case
# 2. We then create the allocation as requested by the user (either new build
#    or update), and we fail if the allocation creation isn't possible due to
#    lack of space. This spins-up the containerized V-IPU for the instance.
# 3. From the allocation properties, we retrieve the IPUM list and shuffle the
#    IPUMs, which requires execution of terraform.
# 4. Create partition, if user requested, in the instance cV-IPU

# Brute force approach because allocation might be anywhere
- name: Try delete partition from user vipu
  ansible.builtin.command:
    cmd: "ssh -i {{ cluster_ssh_private_key_file }} {{ vipu_ssh_extra }} {{ lookup('ansible.builtin.vars', 'vipu_server_ssh_' + item) }} vipu-admin -H localhost -P {{ vipu_container_admin_port }} remove partition {{ user_partition }}"
  when: delete_result.rc|default(1) != 0
  # TODO: look for missing partition?
  ignore_errors: true
  loop:
    - classic
    - bow

- name: Delete existing allocation from V-IPU prime to free space on update
  ansible.builtin.command:
    cmd: "ssh -i {{ cluster_ssh_private_key_file }} {{ vipu_ssh_extra }} {{ lookup('ansible.builtin.vars', 'vipu_server_ssh_' + item) }} vipu-admin remove allocation {{ allocation_name }}"
  register: delete_result
  when: delete_result.rc|default(1) != 0
  ignore_errors: true
  loop:
    - classic
    - bow

- name: Create the allocation of requested size ipum model
  ansible.builtin.shell: |
    ssh -i {{ cluster_ssh_private_key_file }} {{ vipu_ssh_extra }} {{ lookup('ansible.builtin.vars', 'vipu_server_ssh_' + item) }} vipu-admin create allocation {{allocation_name}} --size {{allocation_size | int}} #{{item}}
  register: allocation_result
  ignore_errors: true
  when:
    - allocation_size | int > 0
    - allocation_result.rc|default(1) != 0
  loop: "{{ (ipum_model == 'any') | ternary( 'classic,bow', ipum_model ) | split(',')
    }}"

- name: Debug allocation_result
  ansible.builtin.debug:
    var: allocation_result

- name: Abort if there simply is not enough space
  ansible.builtin.fail:
    msg: No {{(ipum_model == 'any') | ternary( 'classic,bow', ipum_model )}} allocations
      of size {{allocation_size}} available
  when:
    - allocation_result.results | selectattr('stdout', 'defined') | map(attribute='stdout')
      | regex_search('success') is none
    - allocation_size | int > 0

- name: Work out whether we allocated classic or bow
  ansible.builtin.set_fact:
    ipum_model_actual: "{{ allocation_result.results | rejectattr('rc', 'undefined')|
      selectattr('rc', '==', 0) | map(attribute='item')  | first }}"
  when:
    - allocation_size | int > 0

- name: Debug allocation_result
  ansible.builtin.debug:
    #msg: "Detected IPUM type: {{ipum_model_actual | type_debug}}"
    msg: "Allocation result: {{ allocation_result.results }}"

- name: Debug ipum actual name
  ansible.builtin.debug:
    #msg: "Detected IPUM type: {{ipum_model_actual | type_debug}}"
    msg: "Detected IPUM type: {{ipum_model_actual | default('none') }}"


- name: decrypt clouds.yaml
  ansible.builtin.copy:
    decrypt: yes
    src: "{{playbook_dir}}/files/clouds-{{gc_tenancy | default(gc_cloud)}}.yaml"
    dest: "/tmp/{{ gc_cloud }}.yaml"
    mode: 0666
  when: admin_clouds_yaml is not defined

- name: Set clouds.yaml location if missing
  ansible.builtin.set_fact:
    admin_clouds_yaml: "/tmp/{{ gc_cloud }}.yaml"
  when: admin_clouds_yaml is not defined

- name: Get ID of common_ctrl network
  openstack.cloud.networks_info:
    cloud: openstack
    name: "{{ control_network_name | default('azimuth-vpod-common-ctrl') }}"
  register: ctrl_result
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

# Ensure azimuth-vpod-common-ctrl RBAC policy exists
- name: Create a new network RBAC policy for common control
  openstack.cloud.neutron_rbac_policy:
    object_id: "{{ ctrl_result.openstack_networks[0].id}}"
    object_type: "network"
    target_project_id: "{{appliance_project}}"
    project_id: "{{ctrl_result.openstack_networks[0].project_id}}"
    cloud: openstack
    action: "access_as_shared"
    state: present
  register: rbac_result
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

- name: Get ID of common_storage network
  openstack.cloud.networks_info:
    cloud: openstack
    name: "{{ storage_network_name | default('azimuth-vpod-common-storage') }}"
  register: storage_result
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

# Ensure azimuth-vpod-common-storage RBAC policy exists
- name: Create a new network RBAC policy
  openstack.cloud.neutron_rbac_policy:
    object_id: "{{ storage_result.openstack_networks[0].id}}"
    object_type: "network"
    target_project_id: "{{appliance_project}}"
    project_id: "{{storage_result.openstack_networks[0].project_id}}"
    cloud: openstack
    action: "access_as_shared"
    state: present
  environment:
    OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"
  # TODO: probably skip this only based on config!
  when: storage_result.openstack_networks

- name: Get allocation properties
  ansible.builtin.command:
    cmd: "ssh -i {{ cluster_ssh_private_key_file }} {{ vipu_ssh_extra }} {{ lookup('ansible.builtin.vars', 'vipu_server_ssh_' + ipum_model_actual) }} vipu-admin --showjson get allocation {{ allocation_name }}"
  when: allocation_size | int > 0
  register: assigned_alloc_list

- name: List assigned IPUMs cos we need it for the truffle-shuffle
  ansible.builtin.set_fact:
    assigned_ipums_list: "{{ assigned_alloc_list.stdout | from_json |  moreati.jq.jq('.allocation.spec.agent_ids')
      }}"
  when: allocation_size | int > 0

- name: Shuffle IPUMs, need to do this even in the case of allocation_size=0
  ansible.builtin.include_role:
    name: ipum_infra
    tasks_from: truffleshuffle.yml

- name: Create partition if user requested
  block:
    - name: Create partition, here we need to act on the vipu-container
      ansible.builtin.command:
        cmd: "ssh -i {{ cluster_ssh_private_key_file }} {{ vipu_ssh_extra }} {{ lookup('ansible.builtin.vars', 'vipu_server_ssh_' + ipum_model_actual) }} vipu-admin -H localhost -P {{ vipu_container_admin_port }} --showjson create partition {{user_partition}} --size {{allocation_size | int}} --allocation {{allocation_name}} --reconfigurable"
      register: vipu_part_mk
      ignore_errors: true

    - name: Did we create the requested partition?
      ansible.builtin.fail:
        msg: Creating reconfigurable partition size {{allocation_size}} in {{allocation_name}}
      when:
        - vipu_part_mk.rc != 0
  when:
    - '"Single reconfigurable partition" in partition_choice'
    - allocation_size | int > 0
