# This task list is executed when cluster_state = present, which happens during
# new appliance build AND during appliance update. Steps taken are:
#
# 1. Remove an existing user allocation (with same name as this appliance)
#    This is to handle the update case
# 2. We then create the allocation as requested by the user (either new build
#    or update), and we fail if the allocation creation isn't possible due to
#    lack of space. This spins-up the containerized V-IPU for the instance.
# 3. From the allocation properties, we retrieve the IPUM list and shuffle the
#    IPUMs, which requires execution of terraform.
# 4. Create partition, if user requested, in the instance cV-IPU

- name: find vipu server
  ansible.builtin.set_fact:
      vipu_server_ip: "{{ vipu_servers.get(appliance_tenancy, vipu_servers['default'])['floating_ip'] }}"
  when: vipu_server_ip is not defined

- name: Delete existing user allocation (to free space)
  block:
    - name: Delete allocation from V-IPU prime
      ansible.builtin.command:
        cmd: vipu-admin{{vipu_ver}} -H {{ vipu_server_ip }} -P 8091 remove allocation {{allocation_name}}
  rescue:
    - name: Inform user
      ansible.builtin.debug:
        msg: "No existing allocation to remove"

- name: Build the appliance when terraform_state is present
  block:
    - name: test mock ssh
      ansible.builtin.command:
        cmd: "ssh -i /home/runner/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@128.232.227.193 hostname"
      register: ssh_test
    - debug:
        msg: "{{ ssh_test }}"
    - name: test mock ssh via delegate_to
      ansible.builtin.command:
        cmd: "hostname"
      delegate_to: 128.232.227.193
      remote_user: ubuntu
      private_key_file: "/home/runner/.ssh/id_rsa"
      register: ssh_test2
    - debug:
        msg: "{{ ssh_test2 }}"
    # This creation can fail only because there aren't enough free IPUMs
    # (failure because of existing allocation is prevented by block above)
    - name: Create the allocation of requested size
      ansible.builtin.command:
        cmd: vipu-admin{{vipu_ver}} --showjson -H {{ vipu_server_ip }} -P 8091 create allocation {{allocation_name}} --size {{allocation_size | int}}
      when: allocation_size | int > 0
      register: allocation_result
  rescue:
    - name: Abort if there simply is not enough space
      ansible.builtin.fail:
        msg: No allocations of size {{allocation_size}} available
      when: '"no free allocation" in allocation_result.stderr'

      #TODO: Between these two tasks we might need to do something special if
      #      the syslog monitoring of the V-IPU message causes delay.
  always:
    - name: Fail if the allocation wasn't possible, skips "always" steps
      ansible.builtin.fail:
        msg: No allocations of size {{allocation_size}} available
      when:
        - allocation_size | int > 0
        - '"no free allocation" in allocation_result.stderr'

    # TODO: extra var to get the location in deploy rather than this copy using vault ??
    - name: find extra clouds.yaml
      ansible.builtin.set_fact:
          admin_clouds_yaml: "/runner/ssh/clouds.yaml"
      when: admin_clouds_yaml is not defined

    - name: Get ID of common_ctrl network
      openstack.cloud.networks_info:
        cloud: openstack
        name: "{{ control_network_name | default('azimuth-vpod-common-ctrl') }}"
      register: ctrl_result
      environment:
        OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

    - name: Debug ctrl_network result
      ansible.builtin.debug:
        msg: "Ctrl network output {{ ctrl_result }}"

    # TODO: this should all go into the terraform!!!
    # Ensure azimuth-vpod-common-ctrl RBAC policy exists
    - name: Create a new network RBAC policy
      openstack.cloud.neutron_rbac_policy:
        object_id: "{{ ctrl_result.openstack_networks[0].id}}"
        object_type: "network"
        target_project_id: "{{appliance_project}}"
        project_id: "{{ctrl_result.openstack_networks[0].project_id}}"
        cloud: openstack
        action: "access_as_shared"
        state: present
      register: rbac_result
      environment:
        OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

    - name: Get ID of common_storage network
      openstack.cloud.networks_info:
        cloud: openstack
        name: "{{ storage_network_name | default('azimuth-vpod-common-storage') }}"
      register: storage_result
      environment:
        OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

    # Ensure azimuth-vpod-common-storage RBAC policy exists
    - name: Create a new network RBAC policy
      openstack.cloud.neutron_rbac_policy:
        object_id: "{{ storage_result.openstack_networks[0].id}}"
        object_type: "network"
        target_project_id: "{{appliance_project}}"
        project_id: "{{storage_result.openstack_networks[0].project_id}}"
        cloud: openstack
        action: "access_as_shared"
        state: present
      environment:
        OS_CLIENT_CONFIG_FILE: "{{ admin_clouds_yaml }}"

    - name: Get allocation properties
      ansible.builtin.command:
        cmd: vipu-admin{{vipu_ver}} --showjson -H {{ vipu_server_ip }} -P 8091 get allocation {{allocation_name}}
      when: allocation_size | int > 0
      register: assigned_alloc_list

    - name: List assigned IPUMs cos we need it for the truffle-shuffle
      ansible.builtin.set_fact:
        assigned_ipums_list: "{{ assigned_alloc_list.stdout | from_json |  moreati.jq.jq('.allocation.spec.agent_ids') }}"
      when: allocation_size | int > 0

    - name: Shuffle IPUMs, need to do this even in the case of allocation_size=0
      ansible.builtin.include_role:
        name: ipum_infra
        tasks_from: truffleshuffle.yml

    - name: Create partition if user requested
      block:
        - name: Create partition, here we need to act on the vipu-container
          ansible.builtin.command:
            cmd: vipu-admin{{vipu_ver}} -H {{ vipu_server_ip }} -P {{ vipu_container_admin_port }} --showjson create partition {{user_partition}} --size {{allocation_size | int}} --allocation {{allocation_name}} --reconfigurable
          register: vipu_part_mk
          ignore_errors: true

        - name: Did we create the requested partition?
          ansible.builtin.fail:
            msg: Creating reconfigurable partition size {{allocation_size}} in {{allocation_name}}
          when:
            - vipu_part_mk.rc != 0
      when:
        - '"Single reconfigurable partition" in partition_choice'
        - allocation_size | int > 0
