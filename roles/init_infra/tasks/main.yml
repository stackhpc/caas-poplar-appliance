- name: Define the terraform state
  ansible.builtin.set_fact:
    terraform_state: "{{ cluster_state | default('present') }}"

- name: Log appliance name
  ansible.builtin.debug:
    msg: "{{(terraform_state == 'present') | ternary ('Building','Destroying')}} {{cluster_type}} {{cluster_name}} of flavour {{cluster_flavor}} & ID {{cluster_id}} & lifetime {{appliance_lifetime_hrs is defined | ternary(appliance_lifetime_hrs, 'none')}}"

- name: debug the env
  ansible.builtin.shell:
    cmd: env
  register: env_details
- debug:
    msg: "{{ env_details }}"

- name: Get user's openstack project ID
  ansible.builtin.shell:
    cmd: openstack token issue -f value -c project_id --debug

- name: Get openstack user name
  ansible.builtin.shell:
    cmd: openstack user show "$(openstack token issue -f value -c user_id)" -f value -c name
  register: openstack_cli_user

- name: Get user's openstack project ID
  ansible.builtin.shell:
    cmd: openstack token issue -f value -c project_id
  register: openstack_cli_proj

- name: Get tenancy name
  ansible.builtin.shell:
    cmd: openstack project show "$(openstack token issue -f value -c project_id)" -f value -c name
  register: openstack_cli_tenancy_name

- name: Include the vars we need
  ansible.builtin.include_vars:
    file: "{{ var_inc_var }}"
  loop:
    - "{{playbook_dir}}/group_vars/{{gc_tenancy | default(gc_cloud)}}.yaml"
    - "{{playbook_dir}}/group_vars/ipums.yaml"
  loop_control:
    loop_var: var_inc_var

- name: Set various facts
  ansible.builtin.set_fact:
    appliance_user: "{{ (openstack_cli_user.stdout | split('@') | first | lower) if '@' in openstack_cli_user.stdout else openstack_cli_user.stdout | lower }}"
    appliance_project: "{{ openstack_cli_proj.stdout | default( 'ipuops') }}"
    appliance_tenancy: "{{ openstack_cli_tenancy_name.stdout | default( 'ipuops') }}"
    appcred_name: "{{ cluster_name }}_{{ cluster_id }}"
    vipu_container_user_port: "{{ ((cluster_id | int * 10) % 32768) + azimuth_vipu_base_port | int }}"
    vipu_container_admin_port: "{{ (((cluster_id | int * 10) + 1) % 32768) + azimuth_vipu_base_port | int }}"
    vipu_container_exporter_port: "{{ (((cluster_id | int * 10) + 2) % 32768) + azimuth_vipu_base_port | int }}"

- name: Set allocation name
  ansible.builtin.set_fact:
    allocation_name: "{{cluster_id}}-{{appliance_user}}-{{cluster_name}}"

- name: Set partition name
  ansible.builtin.set_fact:
    user_partition: "{{allocation_name}}-reconfig"

- name: Calculate expiration time from now + lifetime + 1 hr
  ansible.builtin.shell:
    cmd: date -d '{{ (appliance_lifetime_hrs | int + 1) * 60 }} mins' +'%FT%T' -u
  register: appcred_expiry_result
  when:
    - appliance_lifetime_hrs is defined
    - not appliance_lifetime_hrs is search("never")

- name: Calculate deletion time from now + lifetime
  ansible.builtin.shell:
    cmd: date -d '{{ appliance_lifetime_hrs | int * 60 }} mins' +'%F %T' -u
  register: appliance_deletion_result
  when:
    - appliance_lifetime_hrs is defined
    - not appliance_lifetime_hrs is search("never")

- name: Set time facts during creation
  ansible.builtin.set_fact:
    appcred_expiry_epoch: "{{ appcred_expiry_result.stdout is defined | ternary(appcred_expiry_result.stdout, 'never') }}"
    appliance_deletion_epoch: "{{ appliance_deletion_result.stdout is defined | ternary(appliance_deletion_result.stdout, 'never') }}"
    schedule_rrule: "{{ query('awx.awx.schedule_rrule', 'none', start_date='' + appliance_deletion_result.stdout is defined | ternary(appliance_deletion_result.stdout,'1969-07-21 02:56:56') + '', timezone='UTC') }}"
